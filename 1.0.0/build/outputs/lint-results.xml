<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.4.1">

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="  e.commit();"
        errorLine2="  ~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/main/java/org/openudid/OpenUDID_manager.java"
            line="79"
            column="3"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putString(&quot;EVENTS&quot;, joinedEventsWithBadJSON).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/WigzoStoreTests.java"
            line="216"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putString(&quot;EVENTS&quot;, joinedEventsWithBadJSON).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/WigzoStoreTests.java"
            line="216"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefsmobile.edit().putString(&quot;EVENTS&quot;, joinedEventsWithBadJSON).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/WigzoStoreTests.java"
            line="219"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefsmobile.edit().putString(&quot;EVENTS&quot;, joinedEventsWithBadJSON).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/WigzoStoreTests.java"
            line="219"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putString(&quot;EVENTS&quot;, joinedEventsWithBadJSON).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/WigzoStoreTests.java"
            line="247"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putString(&quot;EVENTS&quot;, joinedEventsWithBadJSON).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/WigzoStoreTests.java"
            line="247"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefsmobile.edit().putString(&quot;EVENTS&quot;, joinedEventsWithBadJSON).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/WigzoStoreTests.java"
            line="250"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefsmobile.edit().putString(&quot;EVENTS&quot;, joinedEventsWithBadJSON).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/WigzoStoreTests.java"
            line="250"
            column="9"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 13 (current min is 11): `android.util.DisplayMetrics#DENSITY_TV`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mockContext = mockContextForTestingDensity(DisplayMetrics.DENSITY_TV);"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/DeviceInfoTests.java"
            line="74"
            column="52"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 16 (current min is 11): `android.util.DisplayMetrics#DENSITY_XXHIGH`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mockContext = mockContextForTestingDensity(DisplayMetrics.DENSITY_XXHIGH);"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/DeviceInfoTests.java"
            line="80"
            column="52"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 18 (current min is 11): `android.util.DisplayMetrics#DENSITY_XXXHIGH`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mockContext = mockContextForTestingDensity(DisplayMetrics.DENSITY_XXXHIGH);"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/DeviceInfoTests.java"
            line="82"
            column="52"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 11): `android.util.DisplayMetrics#DENSITY_400`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        mockContext = mockContextForTestingDensity(DisplayMetrics.DENSITY_400);"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/DeviceInfoTests.java"
            line="84"
            column="52"/>
    </issue>

    <issue
        id="SdCardPath"
        severity="Warning"
        message="Do not hardcode &quot;/sdcard/&quot;; use `Environment.getExternalStorageDirectory().getPath()` instead"
        category="Correctness"
        priority="6"
        summary="Hardcoded reference to `/sdcard`"
        explanation="Your code should not reference the `/sdcard` path directly; instead use `Environment.getExternalStorageDirectory().getPath()`.

Similarly, do not reference the `/data/data/` path directly; it can vary in multi-user scenarios. Instead, use `Context.getFilesDir().getPath()`."
        url="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        urls="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        errorLine1="  assertEquals(&quot;/mnt/sdcard/pic.jpg&quot;, picturePath);"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/androidTest/java/wigzo/android/sdk/UserDataTests.java"
            line="119"
            column="16"/>
    </issue>

    <issue
        id="TrulyRandom"
        severity="Warning"
        message="Potentially insecure random numbers on Android 4.3 and older. Read https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html for more info."
        category="Security"
        priority="9"
        summary="Weak RNG"
        explanation="Key generation, signing, encryption, and random number generation may not receive cryptographically strong values due to improper initialization of the underlying PRNG on Android 4.3 and below.

If your application relies on cryptographically secure random number generation you should apply the workaround described in https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html .

This lint rule is mostly informational; it does not accurately detect whether cryptographically secure RNG is required, or whether the workaround has already been applied. After reading the blog entry and updating your code if necessary, you can disable this lint issue."
        url="https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html"
        urls="https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html"
        errorLine1="   final SecureRandom random = new SecureRandom();"
        errorLine2="         ~~~~~~~~~~~~">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/main/java/org/openudid/OpenUDID_manager.java"
            line="91"
            column="10"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="checkClientTrusted is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers."
        errorLine1="    public void checkClientTrusted(X509Certificate[] xcs, String string) {"
        errorLine2="                ~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/main/java/wigzo/android/sdk/CertificateTrustManager.java"
            line="80"
            column="17"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Parcel` should be recycled after use with `#recycle()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="   android.os.Parcel data = android.os.Parcel.obtain(); "
        errorLine2="                                              ~~~~~~">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/main/java/org/openudid/OpenUDID_manager.java"
            line="52"
            column="47"/>
    </issue>

    <issue
        id="GoogleAppIndexingWarning"
        severity="Warning"
        message="App is not indexable by Google Search; consider adding at least one Activity with an ACTION-VIEW intent-filler. See issue explanation for more details."
        category="Usability"
        priority="5"
        summary="Missing support for Google App Indexing"
        explanation="Adds deep links to get your app into the Google index, to get installs and traffic to your app from Google Search."
        url="https://g.co/AppIndexing/AndroidStudio"
        urls="https://g.co/AppIndexing/AndroidStudio"
        errorLine1="    &lt;application android:allowBackup=&quot;true&quot; android:label=&quot;Wigzo Android SDK&quot;>"
        errorLine2="    ^">
        <location
            file="/home/wigzo/Android/android_workspace/wigzo_mobile_stack/Testing App/sdk/src/main/AndroidManifest.xml"
            line="5"
            column="5"/>
    </issue>

</issues>
